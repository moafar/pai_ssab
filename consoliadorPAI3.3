'''
v3.3 - 04/11/2023 - Ajuste con el nuevo campo "IPS Vacunadora"
v3.2 - 05/10/2023 - Modifico para correr el script conectado a la carpeta de Google Drive
v3.1 - 30/08/2023 -


Este script recorre la carpeta donde se encuentra ubicado el archivo .py
y procesa los archivos .xlsm que encuentra creando un solo dataframe unificado.
El resultado lo guarda en el libro Excel "consolidado.xlsx".

******************************************************************************
** Requisitos:                                                               *
******************************************************************************
** 1. Verifique que el archivo "consolidado_modelo_30k.xlsx" se              *
** encuentre en la ruta "/content/drive/MyDrive/App-PAI/modelo_Consolidado/" *
**                                                                           *
** 2. Los archivos XLSM a consolidar deben estar en el directorio            *
** '/content/drive/MyDrive/App-PAI/descargados/'                             *
**                                                                           *
******************************************************************************
'''
from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd
import datetime
import openpyxl
import warnings

# Ignorar el mensaje acerca de los campos validados del Excel
warnings.filterwarnings("ignore", message="Data Validation extension is not supported and will be removed")

nombre_hoja = "Registro Diario"

# Obtener la ruta del directorio actual (Get Current Working Directory)
# o sea, el directorio de este archivo .py
directorio_actual = '/content/drive/MyDrive/App-PAI/descargados/'

# Obtener una lista de los archivos y directorios en el directorio actual
lista_archivos = os.listdir(directorio_actual)

# Crear el DataFrame global del municipio, con 257 columnas
df_bga = pd.DataFrame(columns=range(257))

# Recorrer la lista de archivos y directorios
for archivo in lista_archivos:
    ruta_archivo = os.path.join(directorio_actual, archivo)
    if os.path.isfile(ruta_archivo) and archivo.endswith(".xlsm"):

        print(" ********************************************")
        print(datetime.datetime.now())

        nombreIPS = archivo.split()[0]

        print("Nombre IPS:", nombreIPS)
        print("Archivo:", archivo)

        df = pd.read_excel(ruta_archivo, sheet_name="Registro Diario", skiprows=2, engine='openpyxl', header=None)
        print("La forma del df original es: ", df.shape)
        print()

        # Selecciono únicamente las filas diligenciadas, verificando si la columna 1 (fecha de atención) está diligenciada
        df = df[df.iloc[:, 1].notnull()]
        print("La forma del df sin filas vacías es: ", df.shape)
        print()

        # Elimino la última fila (cargada con "fin" en cada columna)
        df = df.drop(df.index[-1])
        print("La forma del df sin la fila de fin es: ", df.shape)
        print()

        # Agrego la columna para identificar la IPS
        df[len(df.columns)] = nombreIPS
        print("La forma del df con la nueva columa de IPS es: ", df.shape)
        print()

        print("Datos cargados.  La base de "+nombreIPS+" tiene", df.shape[0], "filas y ", df.shape[1], " columnas")

        # Agrego los datos al dataframe global del municipio
        df_bga = pd.concat([df_bga, df], ignore_index=True)

        print("----------------------------------------------------")
        print("La base consolidada está así:")
        df_bga.info()
        print("----------------------------------------------------")

        # Vacío los dataframes para la próxima iteración
        df.drop(df.index, inplace=True)

# En este punto ya tengo el dataframe consolidado en la variable df_bga

# Presento en pantalla el resumen de la operación
# Obtener la tabla de frecuencias de la columna 256
tabla_frecuencias = df_bga[257].value_counts()

# Verificar la tabla de frecuencias
print("******************************************************************")
print("Datos cargados.  Se cargaron datos así:")
print(tabla_frecuencias)
print("******************************************************************")

print("******************************************************************")
print("Por favor espere a que se escriba el archivo consolidado.")
print("(Puede tardar varios minutos)")
print("******************************************************************")

# Copio el dataframe eliminando la columna final para cargar los datos al archivo consolidado
df_bga = df_bga.iloc[:, :-1]

# ******************************************
# *** Escribir en el archivo de destino***
# ******************************************

# Ruta del archivo Excel de destino

ruta_modelo = "/content/drive/MyDrive/App-PAI/modelo_Consolidado/consolidado_modelo_30k.xlsx"

# Abro el libro del archivo Excel
libro_trabajo = openpyxl.load_workbook(ruta_modelo)

# Selecciono la hoja del registro
hoja = libro_trabajo["Registro Diario"]

# Leo el contenido de la columna A en la hoja "Registro Diario" antes de escribir nuevos datos
columna_a = [celda.value for celda in hoja["A"]]

# Elimino el primer elemento de la lista para conservar la estructura de la columna A cuando la escriba
columna_a = columna_a[1:]

# Escribir los datos del DataFrame en la hoja "Registro Diario" a partir de la celda B3
for i, fila in enumerate(pd.DataFrame(df_bga).values):
    for j, valor in enumerate(fila):
        hoja.cell(row=3 + i, column=j + 1, value=valor)  # Escribir los datos a partir de la celda B3

# Conservar el contenido de la columna A en la hoja "Registro Diario"
for i, valor in enumerate(columna_a):
    hoja.cell(row=2 + i, column=1, value=valor)

# Guardar los cambios en el archivo Excel
libro_trabajo.save("consolidado.xlsx")

# Cerrar el archivo
libro_trabajo.close()


print("************************************************")
print("Terminado. Los datos se guardaron en el archivo:")
print("<<consolidado.xlsx>>")
print("************************************************")
